//Interpreter implementation
////commands implemented are ls -l, mkdir, rm, echo


#include<sys/types.h>
#include<unistd.h>
#include<stdio.h>
#include<stdlib.h>
#include<string.h>


int lsImplement(char *argv[10]){
        pid_t pid;
        printf("%s %s %s\n",argv[1],argv[2],argv[3]);
        char *const parmlist[] = {argv[1],argv[2],argv[3],NULL};
        if((pid = fork()) == -1){
                perror("fork error");
                return -1;
        }
        else
        if(pid == 0){
                int ret=execv("/bin/ls",parmlist);
                return ret;
        }

}


void parse(char *argv[10]){
        int len = strlen(argv[0]);
        char ch[100]={'\0'};
        int i=0,c=1;
        do{
                printf("all\n");
                int j=0;
                do{
                        printf("abc\n");
                        ch[j++]=argv[0][i++];
                }while((argv[0][i]!=' ') && i<len);
                i++;
                ch[j]='\0';
                argv[c] = (malloc)(sizeof(char)*j);
                strcpy(argv[c++],ch);
        }while(i<len);
}

void print(char *argv[10]){
        printf("%s %s %s\n",argv[1],argv[2],argv[3]);
}
int main(){
        while(1){
                  char *argv[10];
                argv[0]=malloc(sizeof(char)*100);
                fgets(argv[0],100,stdin);
                parse(argv);
                if(strcmp(argv[0],"ls")){
                  printf("inside main\n");
                  print(argv);
                  int ret = lsImplement(argv);
                 }
                else{
                        printf("Invalid input\n");
                }
        }
return 0;
}
