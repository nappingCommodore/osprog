//Dining philoshopher problem


#include<stdio.h>
#include<pthread.h>
#include<semaphore.h>

#define N 3
#define P 5

sem_t   Fork[P];

void *tphilosopher(void* ptr){
        int i, k = (int)ptr;

        for(i = 1; i<=N; i++){
                printf(" Thinking... %d \n",k);

                sem_wait(&Fork[k]);
                sem_wait(&Fork[(k+1)%P]);

                printf(" Eating... %d \n",k);
                sleep(1);
                printf(" Fork Released by %d \n",k);
                sem_post(&Fork[k]);
                sem_post(&Fork[(k+1)%P]);
                sleep(3);


        }

        pthread_exit(0);
}

int main(int argc, char* argv[]){
        int i;

        pthread_t thread[P];

        for(i=0; i<P; i++){
                sem_init(&Fork[i],0,1);
        }

        for(i=0; i<P; i++){
                pthread_create(&thread[i],NULL,&tphilosopher,(void*) i);
        }

        for(i=0; i<P; i++){
                pthread_join(thread[i],NULL);
        }

        for(i=0; i<P; i++){
                sem_destroy(&Fork[i]);
        }

        return 0;
}
