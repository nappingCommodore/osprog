#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<sys/wait.h>
#include<fcntl.h>
void main(int argc,char **argv)
{
pid_t pid;
char para[5][20];
char com[100];
int paracount=0;
char * filenameout=NULL;
char *filenamein=NULL;
const char delim[2]=" ";
char dirnin=NULL;
char dirnout=NULL;
int daemon=0;
while(1)
{
printf(">");
fgets(com,100,stdin);
if(strcmp(com,"exit")==0)
break;
paracount=0;
char *token=strtok(com,delim);
while(token!=NULL){
strcpy(para[paracount++],token);
token=strtok(NULL,delim);}
para[paracount-1][strlen(para[paracount-1])-1]='\0';
int i;
char *common=para[0];
char *arg=NULL;
for(i=0;i<paracount;i++)
{
if(para[i][0]=='-')
arg=para[i];
else if(para[i][0]=='&')
daemon=1;
else if(para[i][0]=='<')
{
dirnin='<';
filenamein=para[i+1];}
else if(para[i][0]=='>')
{
dirnout='>';
filenameout=para[i+1];
}}

//forking

pid=fork();
if(pid==0)
{
if(daemon==1)
{
setsid();
umask(0);
}
int in=NULL;
int out=NULL;
if(dirnout=='>')
{
out=open(filenameout,O_CREAT | O_WRONLY);
dup2(out,STDOUT_FILENO);
}
if(dirnin=='<')
{
in=open(filenamein,O_RDONLY);
dup2(in,STDIN_FILENO);
}
if(execl(common,common,arg,NULL)==-1)
exit(EXIT_FAILURE);
}
else
{
//parent process

if(daemon==0)
{
int status;
wait(&status);
if(status==0)
printf("\n succesfully executed  \n");
else
printf("Error in the execution  \n");
}else
printf("task running in the background\n");
}
printf("\n");
}
}

